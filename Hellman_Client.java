package poste1client;


import java.awt.Color;
import static java.awt.Color.red;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.net.ServerSocket;
import java.net.Socket;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import javax.swing.UIManager;
   
import java.security.SignatureException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.spec.DHParameterSpec;
import javax.crypto.spec.DHPublicKeySpec;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

//import static sun.misc.PostVMInitHook.run;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author toshiba
 */
public class Hellman_Client extends javax.swing.JFrame {
    
   static ServerSocket serveur,ssu;
   static Socket socket,c,socke,socke2 ,soc;
  static   DataInputStream din,din2;
   static DataOutputStream  dout,dout2;
    
    public Hellman_Client(String hash) {
     hash=jhash.getText();
    
       
    }
   // DHParameterSpec dhprams=new   DHParameterSpec(s,m);
          SecureRandom rnd = new SecureRandom();
 //  BigInteger p= new BigInteger(1024,rnd);//	Construit un BigInteger de valeur aléatoire sur l'intervalle [0, 2pow nbBits-1]
  //  BigInteger g= new BigInteger(512,rnd);
  
    //BigInteger a= new BigInteger(2048,rnd);
     BigInteger b= new BigInteger(2048,rnd);
    static  BigInteger k;
   
  static  String sa,sb,sp,sg,sclé,sA,sB,sa1;
   
     public Dimension getPreferredSize() {
return new Dimension (770, 500); // largeur et hauteur préférées
}
     
 
      static BigInteger a,B,p,A,g,a1;
    
public void  a(){
    try{
     sp=jp.getText();
     //construction de p  a partir la chaine  de char
         BigInteger p= new BigInteger(sp);
    BigInteger a= new BigInteger(2048,rnd);
     /*sa = a.toString();
  ja.append(sa);*/
  if(a.compareTo(p)==1)
    {BigInteger a3= a.mod(p);
  sa = a3.toString();
  ja.append(sa);
   BigInteger a6= p.subtract(a3);
   System.out.println("le cas: a sup p"+a6);
    }
     if(a.compareTo(p)==0)
         
    { String aa0, v="2";
    
             BigInteger aa= new BigInteger(v);
        BigInteger a4= p.subtract(aa);
  sa = a4.toString();
  ja.append(sa);
   BigInteger a6= p.subtract(a4);
   System.out.println("cas :p = a"+a6);
    }
     
        if(a.compareTo(p)==-1)
    {BigInteger a5= a.mod(p);
  sa = a.toString();
  ja.append(sa);
   BigInteger a6= p.subtract(a);
   System.out.println("le cas: p  sup"+a6);
     }}catch(Exception ex){
         
      JOptionPane.showMessageDialog(null, " Générer le p et g pour génerer le a");
     
     }
 
   
   
}

 
   String in,ch;
    public  void sha256(String in) throws NoSuchAlgorithmException, UnsupportedEncodingException {
    
        System.out.println( "in est"+in);
        MessageDigest mDigest = MessageDigest.getInstance("SHA-256");
  
        byte[] result = mDigest.digest(in.getBytes());
        //System.out.println( result);
       StringBuffer sb = new StringBuffer();
        for (int i = 0; i < result.length; i++) {
          sb.append(Integer.toString((result[i] & 0xff) + 0x100, 16).substring(2));
            // ch=    new String( result,   "ASCII");
        }
               //System.out.println(sb.toString());
            jhash.append(sb.toString()); 
    
    }

        //   =    new String( result, "UTF-8");
       
          
          //  sb.append();
      //  ch=    new String( result, "ASCII");
        
         /*byte [] byteArray = {0x41,0x42,0x43,0x44,0x45};
	
	System.out.println("ASCII Equivalent of Values in Byte Array:\n");

	System.out.println(new String(byteArray));
   
    // ch=    new String( result, "ASCII");
       
            System.out.println(ch);
     
    } */



 
public Hellman_Client() {
    
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        jclé = new javax.swing.JTextArea();
        ba = new komponenMakeOver.buttonMakeOver();
        jScrollPane1 = new javax.swing.JScrollPane();
        ja = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jg = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jB = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        jA = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jhash = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        jp = new javax.swing.JTextArea();
        jScrollPane10 = new javax.swing.JScrollPane();
        jcle = new javax.swing.JTextArea();
        hasher = new komponenMakeOver.buttonMakeOver();
        difie = new komponenMakeOver.buttonMakeOver();
        jButton1 = new komponenMakeOver.buttonMakeOver();
        quitter = new komponenMakeOver.buttonMakeOver();
        envp = new komponenMakeOver.buttonMakeOver();
        envA = new komponenMakeOver.buttonMakeOver();
        p_g = new komponenMakeOver.buttonMakeOver();
        vide = new komponenMakeOver.buttonMakeOver();
        bcle = new komponenMakeOver.buttonMakeOver();
        bA = new komponenMakeOver.buttonMakeOver();
        utiliser = new komponenMakeOver.buttonMakeOver();
        connect = new komponenMakeOver.buttonMakeOver();
        recueB = new komponenMakeOver.buttonMakeOver();
        jLabel3 = new javax.swing.JLabel();

        jclé.setColumns(20);
        jclé.setRows(5);
        jclé.setText("gpuidab");
        jScrollPane4.setViewportView(jclé);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Diffie Hellman_La Genéation_de_clé_La station_1(client)");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Arial", 2, 10)); // NOI18N
        setForeground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(100, 800));
        setSize(new java.awt.Dimension(2, 10));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        ba.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ba.setForeground(new java.awt.Color(255, 255, 255));
        ba.setText("a");
        ba.setToolTipText("genérer  'a' aleatoirement qu' est secret");
        ba.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                baMouseClicked(evt);
            }
        });
        ba.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baActionPerformed(evt);
            }
        });
        getContentPane().add(ba);
        ba.setBounds(10, 230, 50, 40);

        ja.setColumns(20);
        ja.setRows(5);
        jScrollPane1.setViewportView(ja);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(80, 210, 500, 60);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("p");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(50, 70, 50, 34);

        jg.setColumns(20);
        jg.setRows(5);
        jg.setTabSize(10);
        jScrollPane3.setViewportView(jg);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(80, 140, 500, 60);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("g");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(40, 160, 105, 35);

        jB.setColumns(20);
        jB.setRows(5);
        jB.setToolTipText("");
        jScrollPane6.setViewportView(jB);

        getContentPane().add(jScrollPane6);
        jScrollPane6.setBounds(80, 370, 500, 60);

        jA.setColumns(20);
        jA.setRows(5);
        jA.setToolTipText("");
        jScrollPane7.setViewportView(jA);

        getContentPane().add(jScrollPane7);
        jScrollPane7.setBounds(80, 290, 500, 60);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("B");
        jLabel7.setToolTipText("la station A recue la valeur de B via la station B");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(50, 390, 76, 32);

        jhash.setColumns(20);
        jhash.setRows(5);
        jhash.setTabSize(10);
        jScrollPane2.setViewportView(jhash);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(130, 530, 450, 60);

        jp.setColumns(20);
        jp.setRows(5);
        jp.setTabSize(10);
        jp.setBorder(null);
        jScrollPane8.setViewportView(jp);

        getContentPane().add(jScrollPane8);
        jScrollPane8.setBounds(80, 60, 500, 60);

        jcle.setColumns(20);
        jcle.setRows(5);
        jcle.setTabSize(10);
        jScrollPane10.setViewportView(jcle);

        getContentPane().add(jScrollPane10);
        jScrollPane10.setBounds(130, 450, 450, 60);

        hasher.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        hasher.setForeground(new java.awt.Color(255, 255, 255));
        hasher.setText("SHA-256");
        hasher.setToolTipText("fonction de hachage 256 bits pour rendre la clé de 2048  a une clé de 256 bits");
        hasher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hasherActionPerformed(evt);
            }
        });
        getContentPane().add(hasher);
        hasher.setBounds(10, 540, 100, 50);

        difie.setFont(new java.awt.Font("Bauhaus 93", 1, 18)); // NOI18N
        difie.setForeground(new java.awt.Color(255, 255, 0));
        difie.setText(" .::  Diffie Hellman  ::.");
        getContentPane().add(difie);
        difie.setBounds(190, -10, 320, 60);

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Vider");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(190, 620, 130, 50);

        quitter.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        quitter.setForeground(new java.awt.Color(255, 255, 255));
        quitter.setText("Déconnecter");
        quitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitterActionPerformed(evt);
            }
        });
        getContentPane().add(quitter);
        quitter.setBounds(410, 620, 120, 50);

        envp.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        envp.setForeground(new java.awt.Color(255, 255, 255));
        envp.setText("Envoyer p&g");
        envp.setToolTipText("envoyer le grand nombre premier  'p' a la station SERVER");
        envp.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        envp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                envpActionPerformed(evt);
            }
        });
        getContentPane().add(envp);
        envp.setBounds(610, 100, 130, 50);

        envA.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        envA.setForeground(new java.awt.Color(255, 255, 255));
        envA.setText("Envoyer");
        envA.setToolTipText("envoyer( 'g'  puisaance 'a') mod' p'   a  la station SERVER");
        envA.setBorderPainted(false);
        envA.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        envA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                envAActionPerformed(evt);
            }
        });
        getContentPane().add(envA);
        envA.setBounds(600, 310, 120, 50);

        p_g.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        p_g.setForeground(new java.awt.Color(255, 255, 255));
        p_g.setText("P-G");
        p_g.setToolTipText("p c'est un nombre premier et g son generateur sont public et fixe");
        p_g.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p_gActionPerformed(evt);
            }
        });
        getContentPane().add(p_g);
        p_g.setBounds(10, 110, 60, 40);
        getContentPane().add(vide);
        vide.setBounds(190, 50, 320, 10);

        bcle.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bcle.setForeground(new java.awt.Color(255, 255, 255));
        bcle.setText("la clé-K");
        bcle.setToolTipText("la clé =B puissance a mod p");
        bcle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bcleActionPerformed(evt);
            }
        });
        getContentPane().add(bcle);
        bcle.setBounds(10, 460, 100, 50);

        bA.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bA.setForeground(new java.awt.Color(255, 255, 255));
        bA.setText("A");
        bA.setToolTipText("A=g puissance a mod p");
        bA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAActionPerformed(evt);
            }
        });
        getContentPane().add(bA);
        bA.setBounds(10, 300, 50, 40);

        utiliser.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        utiliser.setForeground(new java.awt.Color(255, 255, 255));
        utiliser.setText("RC4");
        utiliser.setToolTipText("lorsque vous cliquer sur ce bouton vous allez trouver la page d'envoie et de chiffrement a l'aide de RC4");
        utiliser.setBorderPainted(false);
        utiliser.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        utiliser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                utiliserActionPerformed(evt);
            }
        });
        getContentPane().add(utiliser);
        utiliser.setBounds(600, 540, 120, 50);

        connect.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        connect.setForeground(new java.awt.Color(255, 255, 255));
        connect.setText("Connecter");
        connect.setToolTipText("connecter le serveur");
        connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });
        getContentPane().add(connect);
        connect.setBounds(20, 10, 110, 40);

        recueB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        recueB.setForeground(new java.awt.Color(255, 255, 255));
        recueB.setText("recevoir-B");
        recueB.setBorderPainted(false);
        recueB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        recueB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recueBActionPerformed(evt);
            }
        });
        getContentPane().add(recueB);
        recueB.setBounds(600, 380, 120, 50);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/fontblue.png"))); // NOI18N
        jLabel3.setText("jLabel3");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(-10, 0, 800, 700);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void baActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baActionPerformed
             
     a();
       
       
    }//GEN-LAST:event_baActionPerformed

    private void hasherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hasherActionPerformed
         try {String in2; 
             in2=jcle.getText();
             sha256(in2);
         } catch (NoSuchAlgorithmException ex) {
             Logger.getLogger(Hellman_Client.class.getName()).log(Level.SEVERE, null, ex);
         } catch (Exception ex) {
    
            JOptionPane.showMessageDialog(null, "Attention  il y a un problème ");
       }
    }//GEN-LAST:event_hasherActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
       //  jp.setText(null);  jg.setText(null); 
          ja.setText(null);  //jb.setText(null); 
           jcle.setText(null);  jA.setText(null); jB.setText(null);  jhash.setText(null);  
    }//GEN-LAST:event_jButton1ActionPerformed

    private void quitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitterActionPerformed
        // TODO add your handling code here:
          dispose();
    }//GEN-LAST:event_quitterActionPerformed

    private void baMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_baMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_baMouseClicked

    private void p_gActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p_gActionPerformed

         try {
             jp.append("18111848663142005571178770624881214696591339256823507023544605891411707081617152319519180201250440615163700426054396403795303435564101919053459832890139496933938670005799610981765220283775567361483662648340339405220348871308593627647076689407931875483406244310337925809427432681864623551598136302441690546585427193224254314088256212718983105131138772434658820375111735710449331518776858786793875865418124429269409118756812841019074631004956409706877081612616347900606555802111224022921017725537417047242635829949739109274666495826205002104010355456981211025738812433088757102520562459649777989718122219159982614304359");
             jg.append("2859278237642201956931085611015389087970918161297522023542900348087718063098423976428252369340967506010054236052095950169272612831491902295835660747775572934757474194739347115870723217560530672532404847508798651915566434553729839971841903983916294692452760249019857108409189016993380919900231322610083060784269299257074905043636029708121288037909739559605347853174853410208334242027740275688698461842637641566056165699733710043802697192696426360843173620679214131951400148855611740858610821913573088059404459364892373027492936037789337011875710759208498486908611261954026964574111219599568903257472567764789616958430");
// TODO add your handling code here:
         } catch (Exception e) {
               JOptionPane.showMessageDialog(null, "Attention il y a un problème");
            
         }
    }//GEN-LAST:event_p_gActionPerformed

    private void envpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_envpActionPerformed

            
       try {
           String msgout="";
        msgout=jp.getText().trim();
           dout.writeUTF(msgout);//writeUTF(msgout);//.println(msgout);
           String msgoutg="";
        msgoutg=jg.getText().trim();
           dout.writeUTF(msgoutg);
       } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "probleme de connexion ");
           
       }
 
    }//GEN-LAST:event_envpActionPerformed

    private void envAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_envAActionPerformed

    
       try {
           String msgoutA="";
        msgoutA=jA.getText().trim();
           dout.writeUTF(msgoutA);//writeUTF(msgout);//.println(msgout);
       } catch (Exception e) { JOptionPane.showMessageDialog(null, "probleme de connexion ");
           
       } 
       
// TODO add your handling code here:
    }//GEN-LAST:event_envAActionPerformed

    private void bcleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bcleActionPerformed
        // TODO add your handling code here:
        try{
         sp=jp.getText();
         BigInteger p= new BigInteger(sp);
          sg=jg.getText();
         BigInteger g= new BigInteger(sg);
           sB=jB.getText();
           BigInteger B= new BigInteger(sB);
           //pour connsteruire un biginteger a partir de la chaine sB
           
         
          sa1=ja.getText();
         BigInteger a1= new BigInteger(sa1);
         
    
       // BigInteger B=g.modPow(b1, p);
     /*    sB= B.toString();
  jB.append(sB);*/
            //BigInteger B= new BigInteger(sB);
        
     
        //BigInteger(sB);
 //B=(BigInteger). sB;
  //jB.append(sB);
   BigInteger k=B.modPow(a1, p);
   sclé = k.toString();
  jcle.append(sclé);
        }catch(Exception ex){
         JOptionPane.showMessageDialog(null, "Attention un parametre qui manque ");
        }
    }//GEN-LAST:event_bcleActionPerformed

    private void bAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAActionPerformed
try{
    // TODO add your handling code here:
        
         sp=jp.getText();
         BigInteger p= new BigInteger(sp);
          sg=jg.getText();
         BigInteger g= new BigInteger(sg);
         
          sa1=ja.getText();
         BigInteger a1= new BigInteger(sa1);
         
    
        BigInteger A=g.modPow(a1, p);
         sA= A.toString();
  jA.append(sA);}catch(Exception ex){
   JOptionPane.showMessageDialog(null, "Attention un paramètre qui manque " );
  }
    }//GEN-LAST:event_bAActionPerformed

    private void utiliserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_utiliserActionPerformed

   RC4_Client frame=new RC4_Client();
  frame.setVisible(true);//show();
RC4_Client .clé.setText(this.jhash.getText());
 //frame.setVisible(true);
// TODO add your handling code here:
    }//GEN-LAST:event_utiliserActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

     ///   mclient();







// TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
       
    }//GEN-LAST:event_formWindowActivated

    private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
   try{ mclient();}
   catch(Exception e){ JOptionPane.showMessageDialog(null, "erreur probleme de connexion au serveur  / "   +e.getMessage());
   }
        
// TODO add your handling code here:
    }//GEN-LAST:event_connectActionPerformed

    private void recueBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recueBActionPerformed
        // TODO add your handling code here:
        
       String msgin = null;
       try {
           // while(test==true){
           msgin=din.readUTF();
       } catch (Exception ex) {
         
            JOptionPane.showMessageDialog(null, "erreur connecter a un serveur"+ex.getMessage());
       }
              
              
              jB.setText(msgin);//displaying the msg from client
           //   }
    }//GEN-LAST:event_recueBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
          UIManager.setLookAndFeel("com.jtattoo.plaf.smart.SmartLookAndFeel");
*/
       try {
           for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }/*
           UIManager.setLookAndFeel("com.jtattoo.plaf.smart.SmartLookAndFeel");
           
           UIManager.setLookAndFeel("com.jtattoo.plaf.smart.SmartLookAndFeel");
*/
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Hellman_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Hellman_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Hellman_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Hellman_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Hellman_Client().setVisible(true);
               // jp.setPlaceholder("All your base are belong to us!");  
                
 
            }
        });
   // mclient();
       // jp.setPlaceholder("All your base are belong to us!");   
    }
        
     
     // jp.setPlaceholder("All your base are belong to us!");   
    
    
    static  String ip = null;
    public static void mclient(){
    
  boolean test =true ;
     //  int t=0;

          
      //while(t==0){
         // t=1;
        
      try{
              String msgin = "";
            
              
              socke =new Socket(ip,2001);
              din=new    DataInputStream (socke.getInputStream());
              dout=new  DataOutputStream(socke.getOutputStream());
              System.out.println(" moi le client j' attend le serveur ");
              
              
              /* while(test==true){
              msgin=din.readUTF();
              
              
              jB.setText(msgin);//displaying the msg from client
              }*/
                 jB.setText(msgin);//displaying the msg from client
             }    catch(Exception e){
                  JOptionPane.showMessageDialog(null, "erreur probleme de connexion au serveur  / "   +e.getMessage());
          } //}
          
     
     }
    //  test=false;
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bA;
    private javax.swing.JButton ba;
    private javax.swing.JButton bcle;
    private javax.swing.JButton connect;
    private javax.swing.JButton difie;
    private javax.swing.JButton envA;
    private javax.swing.JButton envp;
    private javax.swing.JButton hasher;
    private javax.swing.JTextArea jA;
    private static javax.swing.JTextArea jB;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTextArea ja;
    private static javax.swing.JTextArea jcle;
    private javax.swing.JTextArea jclé;
    private static javax.swing.JTextArea jg;
    private static javax.swing.JTextArea jhash;
    private static javax.swing.JTextArea jp;
    private javax.swing.JButton p_g;
    private javax.swing.JButton quitter;
    private javax.swing.JButton recueB;
    private javax.swing.JButton utiliser;
    private javax.swing.JButton vide;
    // End of variables declaration//GEN-END:variables
}
